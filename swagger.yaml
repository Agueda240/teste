openapi: 3.0.3
info:
  title: API — Gestão de Médicos, Pacientes e Follow-ups
  version: 1.0.0
  description: |
    API REST para gestão de médicos, pacientes e envio/gestão de questionários de follow-up.
    **Autenticação:** Bearer JWT em endpoints protegidos.
servers:
  - url: https://teste-production-0104.up.railway.app/api
    description: Produção
  - url: http://localhost:5000/api
    description: Local

tags:
  - name: Autenticação
  - name: Médicos
  - name: Pacientes
  - name: FollowUps
  - name: Questionários

paths:
  # -------------------------
  # AUTH
  # -------------------------
  /auth/register:
    post:
      tags: [Autenticação]
      summary: Registar utilizador (geral)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: Utilizador registado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/ServerError' }

  /auth/login:
    post:
      tags: [Autenticação]
      summary: Login de utilizador (geral) com rate-limit
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: Login OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '423':
          description: Conta bloqueada por tentativas falhadas
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }
        '500': { $ref: '#/components/responses/ServerError' }

  # -------------------------
  # DOCTORS
  # -------------------------
  /doctors/register:
    post:
      tags: [Médicos]
      summary: Registar médico (envia e-mail para definir senha)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterDoctorRequest' }
      responses:
        '201': { description: Médico registado e e-mail enviado, content: { application/json: { schema: { $ref: '#/components/schemas/Message' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }

  /doctors/login:
    post:
      tags: [Médicos]
      summary: Login de médico
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: Login OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  doctor: { $ref: '#/components/schemas/Doctor' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/ServerError' }

  /doctors/forgot-password:
    post:
      tags: [Médicos]
      summary: Enviar link de recuperação de senha
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, format: email }
      responses:
        '200': { description: Resposta uniforme, content: { application/json: { schema: { $ref: '#/components/schemas/Message' } } } }
        '500': { $ref: '#/components/responses/ServerError' }

  /doctors/set-password:
    post:
      tags: [Médicos]
      summary: Definir/alterar senha a partir de token por e-mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, password]
              properties:
                token: { type: string }
                password: { type: string, minLength: 6 }
      responses:
        '200': { description: Senha definida, content: { application/json: { schema: { $ref: '#/components/schemas/Message' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }

  /doctors/profile:
    get:
      tags: [Médicos]
      security: [{ bearerAuth: [] }]
      summary: Obter perfil do médico autenticado
      responses:
        '200': { description: Perfil, content: { application/json: { schema: { $ref: '#/components/schemas/Doctor' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /doctors:
    get:
      tags: [Médicos]
      security: [{ bearerAuth: [] }]
      summary: Listar médicos
      responses:
        '200':
          description: Lista de médicos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Doctor' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /doctors/{id}:
    put:
      tags: [Médicos]
      security: [{ bearerAuth: [] }]
      summary: Atualizar médico
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateDoctorRequest' }
      responses:
        '200': { description: Médico atualizado, content: { application/json: { schema: { $ref: '#/components/schemas/Doctor' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [Médicos]
      security: [{ bearerAuth: [] }]
      summary: Eliminar médico
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Removido, content: { application/json: { schema: { $ref: '#/components/schemas/Message' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  # -------------------------
  # PATIENTS
  # -------------------------
  /patients:
    post:
      tags: [Pacientes]
      security: [{ bearerAuth: [] }]
      summary: Criar paciente e 1.º follow-up (pré-op + agendamentos)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreatePatientRequest' }
      responses:
        '201':
          description: Paciente e follow-up criados
          content:
            application/json:
              schema:
                type: object
                properties:
                  patient: { $ref: '#/components/schemas/Patient' }
                  followUp: { $ref: '#/components/schemas/FollowUp' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
    get:
      tags: [Pacientes]
      security: [{ bearerAuth: [] }]
      summary: Listar pacientes (com follow-ups agregados)
      parameters:
        - in: query
          name: estado
          schema: { type: string, enum: [ativo, arquivado] }
      responses:
        '200':
          description: Lista de pacientes
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/PatientWithFollowUps' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /patients/medications:
    get:
      tags: [Pacientes]
      security: [{ bearerAuth: [] }]
      summary: Listar medicações distintas
      responses:
        '200':
          description: Lista de medicações
          content:
            application/json:
              schema:
                type: array
                items: { type: string }

  /patients/surgeryTypes:
    get:
      tags: [Pacientes]
      security: [{ bearerAuth: [] }]
      summary: Listar tipos de cirurgia distintos
      responses:
        '200':
          description: Lista de tipos de cirurgia
          content:
            application/json:
              schema:
                type: array
                items: { type: string }

  /patients/{id}:
    get:
      tags: [Pacientes]
      security: [{ bearerAuth: [] }]
      summary: Obter paciente (com follow-ups)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Paciente encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PatientFull' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Pacientes]
      security: [{ bearerAuth: [] }]
      summary: Atualizar paciente
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdatePatientRequest' }
      responses:
        '200': { description: Atualizado, content: { application/json: { schema: { $ref: '#/components/schemas/Patient' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [Pacientes]
      security: [{ bearerAuth: [] }]
      summary: Eliminar paciente (e follow-ups associados)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Removido, content: { application/json: { schema: { $ref: '#/components/schemas/Message' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /patients/{id}/estado:
    patch:
      tags: [Pacientes]
      security: [{ bearerAuth: [] }]
      summary: Atualizar estado do paciente
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [estado]
              properties:
                estado: { type: string, enum: [ativo, arquivado] }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Patient' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /patients/{id}/ativar:
    patch:
      tags: [Pacientes]
      security: [{ bearerAuth: [] }]
      summary: Reativar paciente (atalho para estado=ativo)
      parameters: [ { in: path, name: id, required: true, schema: { type: string } } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Message' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /patients/{patientId}/remind-manual-all:
    post:
      tags: [Pacientes]
      security: [{ bearerAuth: [] }]
      summary: Enviar lembrete único com todos os formulários devidos (deduplicados)
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includeExpired: { type: boolean, default: true }
                scope: { type: string, enum: [active, latest, all], default: active }
      responses:
        '200':
          description: Resultado do envio
          content:
            application/json:
              schema:
                type: object
                properties:
                  sent: { type: boolean }
                  count: { type: integer }
                  formIds:
                    type: array
                    items: { type: string }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /patients/{patientId}/send-form/{formId}:
    post:
      tags: [Pacientes]
      security: [{ bearerAuth: [] }]
      summary: Enviar manualmente um formulário específico ao paciente
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: formId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Message' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  # -------------------------
  # FOLLOWUPS
  # -------------------------
  /followups:
    get:
      tags: [FollowUps]
      security: [{ bearerAuth: [] }]
      summary: Listar todos os follow-ups (global, para dashboard)
      responses:
        '200':
          description: Lista
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/FollowUpPopulated' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /followups/surgery-types:
    get:
      tags: [FollowUps]
      security: [{ bearerAuth: [] }]
      summary: Tipos de cirurgia distintos (em follow-ups)
      responses:
        '200':
          description: Lista
          content:
            application/json:
              schema:
                type: array
                items: { type: string }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /followups/by-slug/{slug}:
    get:
      tags: [Questionários]
      summary: Obter metadados por link de slug (público)
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Metadados do questionário
          content:
            application/json:
              schema:
                type: object
                properties:
                  patientId: { type: string }
                  followUpId: { type: string }
                  questionnaireId: { type: string }
                  formId: { type: string }
        '404': { $ref: '#/components/responses/NotFound' }

  /followups/verify/{patientId}/{followUpId}/{questionnaireId}:
    get:
      tags: [Questionários]
      summary: Verificar se existe questionário pendente (público)
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
        - in: path
          name: questionnaireId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Existe e está pendente
          content:
            application/json:
              schema:
                type: object
                properties:
                  formId: { type: string }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/ServerError' }

  /followups/questionnaires/critical:
    get:
      tags: [Questionários]
      summary: Listar questionários críticos (score médio < maxAvg)
      parameters:
        - in: query
          name: maxAvg
          schema: { type: number, default: 2 }
        - in: query
          name: onlyUnverified
          schema: { type: boolean, default: true }
      responses:
        '200':
          description: Lista achatada (com paciente/doctor anexados)
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/CriticalQuestionnaire' }

  /followups/{patientId}:
    post:
      tags: [FollowUps]
      security: [{ bearerAuth: [] }]
      summary: Criar novo follow-up para paciente existente
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateFollowUpRequest' }
      responses:
        '201': { description: Criado, content: { application/json: { schema: { $ref: '#/components/schemas/FollowUp' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
    get:
      tags: [FollowUps]
      security: [{ bearerAuth: [] }]
      summary: Listar follow-ups de um paciente
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Lista
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/FollowUp' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /followups/{patientId}/{followUpId}:
    get:
      tags: [FollowUps]
      security: [{ bearerAuth: [] }]
      summary: Obter follow-up por ID
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/FollowUp' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [FollowUps]
      security: [{ bearerAuth: [] }]
      summary: Atualizar follow-up
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateFollowUpRequest' }
      responses:
        '200': { description: Atualizado, content: { application/json: { schema: { $ref: '#/components/schemas/FollowUp' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
    delete:
      tags: [FollowUps]
      security: [{ bearerAuth: [] }]
      summary: Eliminar follow-up
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
      responses:
        '200': { description: Removido, content: { application/json: { schema: { $ref: '#/components/schemas/Message' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /followups/{patientId}/{followUpId}/questionnaires:
    post:
      tags: [Questionários]
      security: [{ bearerAuth: [] }]
      summary: Adicionar questionário ao follow-up
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AddQuestionnaireRequest' }
      responses:
        '201': { description: Criado, content: { application/json: { schema: { $ref: '#/components/schemas/Questionnaire' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
    get:
      tags: [Questionários]
      security: [{ bearerAuth: [] }]
      summary: Listar questionários do follow-up
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Lista
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Questionnaire' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /followups/{patientId}/{followUpId}/questionnaires/{id}:
    put:
      tags: [Questionários]
      security: [{ bearerAuth: [] }]
      summary: Atualizar questionário
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateQuestionnaireRequest' }
      responses:
        '200': { description: Atualizado, content: { application/json: { schema: { $ref: '#/components/schemas/Message' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
    delete:
      tags: [Questionários]
      security: [{ bearerAuth: [] }]
      summary: Remover questionário
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Removido, content: { application/json: { schema: { $ref: '#/components/schemas/Message' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /followups/{patientId}/{followUpId}/questionnaires/{questionnaireId}/verify:
    patch:
      tags: [Questionários]
      security: [{ bearerAuth: [] }]
      summary: Marcar questionário como verificado (pelo clínico)
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
        - in: path
          name: questionnaireId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  verified: { type: boolean }
                  verifiedAt: { type: string, format: date-time }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /followups/{patientId}/{followUpId}/discharge:
    put:
      tags: [FollowUps]
      security: [{ bearerAuth: [] }]
      summary: Definir data de alta e recalendarizar pós-op
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [dischargeDate]
              properties:
                dischargeDate: { type: string, format: date }
      responses:
        '200': { description: Follow-up atualizado (fresh), content: { application/json: { schema: { $ref: '#/components/schemas/FollowUpPopulated' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /followups/{patientId}/{followUpId}/send-form/{formId}:
    post:
      tags: [Questionários]
      security: [{ bearerAuth: [] }]
      summary: Envio manual de formulário (por follow-up)
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
        - in: path
          name: formId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Message' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  # Submissão pública (via link)
  /followups/{patientId}/{followUpId}/{questionnaireId}/submit-form:
    post:
      tags: [Questionários]
      summary: Submeter respostas de um questionário (público via slug→ids)
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: string }
        - in: path
          name: followUpId
          required: true
          schema: { type: string }
        - in: path
          name: questionnaireId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SubmitQuestionnaireRequest' }
      responses:
        '200':
          description: Submetido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  metrics:
                    type: object
                    properties:
                      scoreAvg: { type: number, nullable: true }
                  verified: { type: boolean, nullable: true }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/ServerError' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Pedido inválido
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Message' }
    Unauthorized:
      description: Não autorizado / token inválido
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Message' }
    NotFound:
      description: Recurso não encontrado
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Message' }
    ServerError:
      description: Erro interno
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Message' }

  schemas:
    Message:
      type: object
      properties:
        message: { type: string }

    # ---------- AUTH ----------
    RegisterUserRequest:
      type: object
      required: [nome, email, password, sexo, data_nascimento, role]
      properties:
        nome: { type: string }
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
        sexo: { type: string }
        data_nascimento: { type: string, format: date }
        role: { type: string }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }

    AuthSuccessResponse:
      type: object
      properties:
        message: { type: string }
        token: { type: string }
        user:
          type: object
          properties:
            id: { type: string }
            nome: { type: string }
            email: { type: string, format: email }
            sexo: { type: string }
            data_nascimento: { type: string, format: date }
            role: { type: string }

    # ---------- DOCTORS ----------
    RegisterDoctorRequest:
      type: object
      required: [name, email, tipoProfissional]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        tipoProfissional: { type: string, enum: ['Médico','Enfermeiro'] }

    UpdateDoctorRequest:
      type: object
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
        tipoProfissional: { type: string, enum: ['Médico','Enfermeiro'] }

    Doctor:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        email: { type: string, format: email }
        tipoProfissional: { type: string, enum: ['Médico','Enfermeiro'] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    # ---------- PATIENTS ----------
    Patient:
      type: object
      properties:
        _id: { type: string }
        processNumber: { type: string }
        name: { type: string }
        email: { type: string }
        phone: { type: string }
        dateOfBirth: { type: string, format: date }
        gender: { type: string, enum: [M, F, O] }
        estado: { type: string, enum: [ativo, arquivado] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    CreatePatientRequest:
      type: object
      required: [processNumber, name, dateOfBirth, gender, email, phone, doctor, surgeryDate, surgeryType]
      properties:
        processNumber: { type: string }
        name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        dateOfBirth: { type: string, format: date }
        gender: { type: string, enum: [M, F, O] }
        doctor: { type: string, description: 'ObjectId do Doctor' }
        surgeryDate: { type: string, format: date }
        surgeryType: { type: string }
        medications:
          type: array
          items: { type: string }

    UpdatePatientRequest:
      type: object
      properties:
        processNumber: { type: string }
        name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        dateOfBirth: { type: string, format: date, nullable: true }
        gender: { type: string, enum: [M, F, O] }

    PatientWithFollowUps:
      allOf:
        - $ref: '#/components/schemas/Patient'
        - type: object
          properties:
            followUps:
              type: array
              items: { $ref: '#/components/schemas/FollowUp' }

    PatientFull:
      allOf:
        - $ref: '#/components/schemas/Patient'
        - type: object
          properties:
            followUps:
              type: array
              items: { $ref: '#/components/schemas/FollowUpPopulated' }

    # ---------- FOLLOWUPS & QUESTIONNAIRES ----------
    Answer:
      type: object
      properties:
        question: { type: string }
        answer: { type: string }
        conditionalLabel: { type: string, nullable: true }
        additional: { type: string, nullable: true }
        score: { type: number, nullable: true }

    QuestionnaireMetrics:
      type: object
      properties:
        scoreAvg: { type: number, nullable: true, description: 'Média 1..3' }

    Questionnaire:
      type: object
      properties:
        _id: { type: string }
        formId: { type: string, example: 'follow-up_3meses' }
        slug: { type: string }
        scheduledAt: { type: string, format: date-time, nullable: true }
        sentAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time }
        filled: { type: boolean }
        attempts: { type: integer }
        dateFilled: { type: string, format: date-time, nullable: true }
        estado: { type: string, enum: [ativo, expirado] }
        metrics: { $ref: '#/components/schemas/QuestionnaireMetrics' }
        verified: { type: boolean, nullable: true }
        answers:
          type: array
          items: { $ref: '#/components/schemas/Answer' }

    AddQuestionnaireRequest:
      type: object
      required: [formId]
      properties:
        formId: { type: string }
        answers:
          type: array
          items: { $ref: '#/components/schemas/Answer' }

    UpdateQuestionnaireRequest:
      type: object
      properties:
        formId: { type: string }
        answers:
          type: array
          items: { $ref: '#/components/schemas/Answer' }
        dateFilled: { type: string, format: date-time }

    SubmitQuestionnaireRequest:
      type: object
      required: [answers]
      properties:
        answers:
          type: array
          items: { $ref: '#/components/schemas/Answer' }

    FollowUp:
      type: object
      properties:
        _id: { type: string }
        patient: { type: string }
        doctor: { type: string }
        surgeryDate: { type: string, format: date }
        surgeryType: { type: string }
        doctorAssignedAt: { type: string, format: date-time }
        medications:
          type: array
          items: { type: string }
        status: { type: string, enum: [ativo, concluído, expirado] }
        dischargeDate: { type: string, format: date-time, nullable: true }
        questionnaires:
          type: array
          items: { $ref: '#/components/schemas/Questionnaire' }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    FollowUpPopulated:
      allOf:
        - $ref: '#/components/schemas/FollowUp'
        - type: object
          properties:
            patient: { $ref: '#/components/schemas/Patient' }
            doctor: { $ref: '#/components/schemas/Doctor' }

    CreateFollowUpRequest:
      type: object
      properties:
        surgeryDate: { type: string, format: date, nullable: true }
        surgeryType: { type: string }
        medications:
          type: array
          items: { type: string }

    UpdateFollowUpRequest:
      type: object
      properties:
        surgeryDate: { type: string, format: date }
        surgeryType: { type: string }
        medications:
          type: array
          items: { type: string }
        status: { type: string, enum: [ativo, concluído, expirado] }

    CriticalQuestionnaire:
      type: object
      properties:
        formId: { type: string }
        sentAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
        filled: { type: boolean }
        attempts: { type: integer }
        dateFilled: { type: string, format: date-time, nullable: true }
        estado: { type: string }
        answers:
          type: array
          items: { $ref: '#/components/schemas/Answer' }
        verified: { type: boolean, nullable: true }
        metrics:
          type: object
          properties:
            scoreAvg: { type: number, nullable: true }
        patient: { $ref: '#/components/schemas/Patient' }
        doctor: { $ref: '#/components/schemas/Doctor' }
        followUpId: { type: string }
        questionnaireId: { type: string }
